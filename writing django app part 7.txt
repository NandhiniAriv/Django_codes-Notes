Customize the admin form¶

* By registering the Question model with admin.site.register(Question), Django was able to construct a default form representation. Often, 
  you’ll want to customize how the admin form looks and works. You’ll do this by telling Django the options you want when you register the object.

*  Replace the admin.site.register(Question) line 

polls/admin.py¶
from django.contrib import admin

from .models import Question


class QuestionAdmin(admin.ModelAdmin):
    fields = ['pub_date', 'question_text']

admin.site.register(Question, QuestionAdmin)

* create a model admin class, then pass it as the second argument to admin.site.register() – any time you need to change the admin options for a model.

* This particular change above makes the “Publication date” come before the “Question” field

* speaking of forms with dozens of fields, you might want to split the form up into fieldsets

polls/admin.py¶
from django.contrib import admin

from .models import Question


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date']}),
    ]

admin.site.register(Question, QuestionAdmin)

-------------------------------------------------------------------------------------------------------------------------------------------------
Adding related objects¶

first is to register Choice with the admin

polls/admin.py¶
from django.contrib import admin

from .models import Choice, Question
# ...
admin.site.register(Choice)

* In that form, the “Question” field is a select box containing every question in the database. Django knows that a ForeignKey should be represented in the admin as 
  a <select> box. In our case, only one question exists at this point.

* Also note the “Add Another” link next to “Question.” Every object with a ForeignKey relationship to another gets this for free. When you click “Add Another”, 
  you’ll get a popup window with the “Add question” form. If you add a question in that window and click “Save”, Django will save the question to the database 
  and dynamically add it as the selected choice on the “Add choice” form you’re looking at.

* But, really, this is an inefficient way of adding Choice objects to the system. It’d be better if you could add a bunch of Choices directly when you create 
  the Question object. Let’s make that happen.

* Remove the register() call for the Choice model. Then, edit the Question registration code to read

polls/admin.py¶
from django.contrib import admin

from .models import Choice, Question


class ChoiceInline(admin.StackedInline):
    model = Choice
    extra = 3


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
    ]
    inlines = [ChoiceInline]

admin.site.register(Question, QuestionAdmin)

* This tells Django: “Choice objects are edited on the Question admin page. By default, provide enough fields for 3 choices.”

* Load the “Add question” page

* One small problem, though. It takes a lot of screen space to display all the fields for entering related Choice objects. For that reason, 
  Django offers a tabular way of displaying inline related objects; you just need to change the ChoiceInline declaration to read

-------------------------------------------------------------------------------------------------------------------------------------------------------

Customize the admin change list¶

*  let’s make some tweaks to the “change list” page – the one that displays all the questions in the system.

* By default, Django displays the str() of each object. But sometimes it’d be more helpful if we could display individual fields. To do that, use the 
  list_display admin option, which is a tuple of field names to display, as columns, on the change list page for the object

polls/admin.py¶
class QuestionAdmin(admin.ModelAdmin):
    # ...
    list_display = ('question_text', 'pub_date')
Just for good measure, let’s also include the was_published_recently() method from Tutorial 2:

polls/admin.py¶
class QuestionAdmin(admin.ModelAdmin):
    # ...
    list_display = ('question_text', 'pub_date', 'was_published_recently')

* You can click on the column headers to sort by those values – except in the case of the was_published_recently header, because sorting by the output of an 
  arbitrary method is not supported. Also note that the column header for was_published_recently is, by default, the name of the method (with underscores replaced 
  with spaces), and that each line contains the string representation of the output.

polls/models.py¶
class Question(models.Model):
    # ...
    def was_published_recently(self):
        now = timezone.now()
        return now - datetime.timedelta(days=1) <= self.pub_date <= now
    was_published_recently.admin_order_field = 'pub_date'
    was_published_recently.boolean = True
    was_published_recently.short_description = 'Published recently?'

* Edit your polls/admin.py file again and add an improvement to the Question change list page: filters using the list_filter. Add the following line to QuestionAdmin:
 
		list_filter = ['pub_date']

-------------------------------------------------------------------------------------------------------------------------------------------------------

* The type of filter displayed depends on the type of field you’re filtering on. Because pub_date is a DateTimeField, Django knows to give appropriate 
  filter options: “Any date”, “Today”, “Past 7 days”, “This month”, “This year”.

		search_fields = ['question_text']

* That adds a search box at the top of the change list. When somebody enters search terms, Django will search the question_text field. You can use as many fields 
  as you’d like – although because it uses a LIKE query behind the scenes, limiting the number of search fields to a reasonable number will make it easier for your 
  database to do the search.

-------------------------------------------------------------------------------------------------------------------------------------------------------
Customize the admin look and feel¶

* “Django administration” at the top of each admin page is ridiculous. It’s just placeholder text.

* That’s easy to change, though, using Django’s template system. The Django admin is powered by Django itself, and its interfaces use Django’s own template system

* Create a templates directory in your project directory (the one that contains manage.py). Templates can live anywhere on your filesystem that Django can access. (Django runs as whatever user your server runs.) However, keeping your templates within the project is a good convention to follow.

* Open your settings file (mysite/settings.py, remember) and add a DIRS option in the TEMPLATES setting:

mysite/settings.py¶
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


* Now create a directory called admin inside templates, and copy the template admin/base_site.html from within the default Django admin template directory 
  in the source code of Django itself (django/contrib/admin/templates) into that directory.


* If you have difficulty finding where the Django source files are located on your system, run the following command:


		$ python -c "import django; print(django.__path__)"


*  just edit the file and replace {{ site_header|default:_('Django administration') }} (including the curly braces) with your own site’s name as you see fit. You should end up with a section of code like:

		{% block branding %}
		<h1 id="site-name"><a href="{% url 'admin:index' %}">Polls Administration</a></h1>
		{% endblock %}

* We use this approach to teach you how to override templates. In an actual project, you would probably use the django.contrib.admin.AdminSite.site_header attribute
  to more easily make this particular customization.

* This template file contains lots of text like {% block branding %} and {{ title }}. The {% and {{ tags are part of Django’s template language. When Django renders
  admin/base_site.html, this template language will be evaluated to produce the final HTML page

-------------------------------------------------------------------------------------------------------------------------------------------------------





