Views overview

* A view is a “type” of Web page in your Django application that generally serves a specific function and 
  has a specific template

* In our poll application, we’ll have the following four views:

Question “index” page – displays the latest few questions.
Question “detail” page – displays a question text, with no results but with a form to vote.
Question “results” page – displays results for a particular question.
Vote action – handles voting for a particular choice in a particular question.


* In Django, web pages and other content are delivered by views. Each view is represented by a simple Python function (or method, in the case of class-based views).
  Django will choose a view by examining the URL that’s requested (to be precise, the part of the URL after the domain name).

--------------------------------------------------------------------------------------------------------

Writing more views

* polls/views.py¶

def detail(request, question_id):
    return HttpResponse("You're looking at question %s." % question_id)

def results(request, question_id):
    response = "You're looking at the results of question %s."
    return HttpResponse(response % question_id)

def vote(request, question_id):
    return HttpResponse("You're voting on question %s." % question_id)

* Add the new views to the polls url

polls/urls.py¶
from django.urls import path

from . import views

urlpatterns = [
    # ex: /polls/
    path('', views.index, name='index'),
    # ex: /polls/5/
    path('<int:question_id>/', views.detail, name='detail'),
    # ex: /polls/5/results/
    path('<int:question_id>/results/', views.results, name='results'),
    # ex: /polls/5/vote/
    path('<int:question_id>/vote/', views.vote, name='vote'),
]

* “/polls/34/”. It’ll run the detail() method and display whatever ID you provide in the URL. 
  Try “/polls/34/results/” and “/polls/34/vote/” too

*  new index() view, which displays the latest 5 poll questions in the system, separated by commas, according to publication date

		polls/views.py¶
		from django.http import HttpResponse

		from .models import Question


		def index(request):
   		latest_question_list = Question.objects.order_by('-pub_date')[:5]
    		output = ', '.join([q.question_text for q in latest_question_list])
    		return HttpResponse(output)

	# Leave the rest of the views (detail, results, vote) unchanged

*  create a directory called templates in your polls directory. Django will look for templates in there.

========================================================================================================
TEMPLATES¶
Default: [] (Empty list)

A list containing the settings for all template engines to be used with Django. Each item of the list is a dictionary containing the options for an individual engine.

Here’s a simple setup that tells the Django template engine to load templates from the templates subdirectory inside each installed application:

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
    },
]
The following options are available for all backends.

BACKEND¶
Default: Not defined

The template backend to use. The built-in template backends are:

'django.template.backends.django.DjangoTemplates'
'django.template.backends.jinja2.Jinja2'
You can use a template backend that doesn’t ship with Django by setting BACKEND to a fully-qualified path (i.e. 'mypackage.whatever.Backend').

NAME¶
Default: see below

The alias for this particular template engine. It’s an identifier that allows selecting an engine for rendering. Aliases must be unique across all configured template engines.

It defaults to the name of the module defining the engine class, i.e. the next to last piece of BACKEND, when it isn’t provided. For example if the backend is 'mypackage.whatever.Backend' then its default name is 'whatever'.

DIRS¶
Default: [] (Empty list)

Directories where the engine should look for template source files, in search order.

APP_DIRS¶
Default: False

Whether the engine should look for template source files inside installed applications.

Note

The default settings.py file created by django-admin startproject sets 'APP_DIRS': True.

OPTIONS¶
Default: {} (Empty dict)

Extra parameters to pass to the template backend. Available parameters vary depending on the template backend. See DjangoTemplates and Jinja2 for the options of 
the built-in backends.

==============================================================================================================================================

* Also create polls directory inside template, and create a index.html file

		polls/templates/polls/index.html¶
		{% if latest_question_list %}
    		    <ul>
    		    {% for question in latest_question_list %}
       			 <li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>
    		    {% endfor %}
    		    </ul>
		{% else %}
    		    <p>No polls are available.</p>
		{% endif %}


Now let’s update our index view in polls/views.py to use the template:


polls/views.py¶

from django.http import HttpResponse
from django.template import loader

from .models import Question


def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    template = loader.get_template('polls/index.html')
    context = {
        'latest_question_list': latest_question_list,
    }
    return HttpResponse(template.render(context, request))


That code loads the template called polls/index.html and passes it a context. The context is a dictionary mapping template variable names to Python objects.
-------------------------------------------------------------------------------------------------------------------

Raising a 404 error¶
Now, let’s tackle the question detail view – the page that displays the question text for a given poll. Here’s the view:

polls/views.py¶
from django.http import Http404
from django.shortcuts import render

from .models import Question
# ...
def detail(request, question_id):
    try:
        question = Question.objects.get(pk=question_id)
    except Question.DoesNotExist:
        raise Http404("Question does not exist")
    return render(request, 'polls/detail.html', {'question': question})

polls/templates/polls/detail.html¶
{{ question }}

It’s a very common idiom to use get() and raise Http404 if the object doesn’t exist. Django provides a shortcut. Here’s the detail() view, rewritten:

polls/views.py¶
from django.shortcuts import get_object_or_404, render

from .models import Question
# ...
def detail(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, 'polls/detail.html', {'question': question})

The get_object_or_404() function takes a Django model as its first argument and an arbitrary number of keyword arguments, which it passes to the get() function of the model’s manager. 
It raises Http404 if the object doesn’t exist.

There’s also a get_list_or_404() function, which works just as get_object_or_404() – except using filter() instead of get(). It raises Http404 if the list is empty.

------------------------------------------------------------------------------------------------------------------------------------------------------
Use the template system¶
Back to the detail() view for our poll application. Given the context variable question, here’s what the polls/detail.html template might look like:

polls/templates/polls/detail.html¶
<h1>{{ question.question_text }}</h1>
<ul>
{% for choice in question.choice_set.all %}
    <li>{{ choice.choice_text }}</li>
{% endfor %}
</ul>
The template system uses dot-lookup syntax to access variable attributes. In the example of {{ question.question_text }}, first Django does a dictionary lookup on the object question. Failing that, it tries an attribute lookup – which works, in this case. If attribute lookup had failed, it would’ve tried a list-index lookup.

Method-calling happens in the {% for %} loop: question.choice_set.all is interpreted as the Python code question.choice_set.all(), which returns an iterable of Choice objects and is suitable for use in the {% for %} tag.

See the template guide for more about templates.
------------------------------------------------------------------------------------------------------------------------------------------------------

Removing hardcoded URLs in templates¶
Remember, when we wrote the link to a question in the polls/index.html template, the link was partially hardcoded like this:

<li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>

The problem with this hardcoded, tightly-coupled approach is that it becomes challenging to change URLs on projects with a lot of templates. However, since you defined the name argument in the path() functions in the polls.
urls module, you can remove a reliance on specific URL paths defined in your url configurations by using the {% url %} template tag:

<li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>
The way this works is by looking up the URL definition as specified in the polls.urls module. You can see exactly where the URL name of ‘detail’ is defined below:

...
# the 'name' value as called by the {% url %} template tag
path('<int:question_id>/', views.detail, name='detail'),
...
If you want to change the URL of the polls detail view to something else, perhaps to something like polls/specifics/12/ instead of doing it in the template (or templates) you would change it in polls/urls.py:

...
# added the word 'specifics'
path('specifics/<int:question_id>/', views.detail, name='detail'),
...

------------------------------------------------------------------------------------------------------------------------------------------------------

Namespacing URL names¶
The tutorial project has just one app, polls. In real Django projects, there might be five, ten, twenty apps or more. How does Django differentiate the URL names between them? For example, the polls app has a detail view, and so might an app on the same project that is for a blog. How does one make it so that Django knows which app view to create for a url when using the {% url %} template tag?

The answer is to add namespaces to your URLconf. In the polls/urls.py file, go ahead and add an app_name to set the application namespace:

polls/urls.py¶
from django.urls import path

from . import views

app_name = 'polls'
urlpatterns = [
    path('', views.index, name='index'),
    path('<int:question_id>/', views.detail, name='detail'),
    path('<int:question_id>/results/', views.results, name='results'),
    path('<int:question_id>/vote/', views.vote, name='vote'),
]
Now change your polls/index.html template from:

polls/templates/polls/index.html¶
<li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>
to point at the namespaced detail view:

polls/templates/polls/index.html¶
<li><a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a></li>

------------------------------------------------------------------------------------------------------------------------------------------------------